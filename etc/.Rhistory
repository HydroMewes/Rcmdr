options(warn = -1)
gw <- gwindow("Anpassung", visible = FALSE, horinzontale = TRUE)
GG <- ggroup(horizontal=TRUE, container=gw)
group <- ggroup(horizontal=FALSE, container=GG)
groupgraph <- ggroup(horizontal=FALSE, container=GG, width = 1000 , height = 600, pointsize = 48)
options <- glabel("Grafiksoptionen", horizontal = FALSE, container = group)
titlefrm <- gframe("Ueberschrift", horizontal = FALSE, container=group)
.GlobalEnv$titlegrf <-gedit("Exanto", container = titlefrm)
x.frm <- gframe("Y Untere und Obere Gr.", horizontal = FALSE, container=group)
.GlobalEnv$xlow <-gedit("untere", container = x.frm)
.GlobalEnv$xup <-gedit("obere", container = x.frm)
y.frm <- gframe("HQ Untere und Obere Gr.", horizontal = FALSE, container=group)
.GlobalEnv$ylow <-gedit("untere", container = y.frm)
.GlobalEnv$yup <-gedit("obere", container = y.frm)
lab.frm <- gframe("X-Achse", horizontal = FALSE, container=group)
.GlobalEnv$xlabel <-gcombobox(c("alle", "y = - ln(ln(1/Pu))", "Pu", "T"), container = lab.frm)
dateifrm <- gframe("Typ Datei", horizontal = FALSE, container=group)
typecbx <- gcombobox(c("pp", "uu"), container = dateifrm)
group.refresh.grf <- ggroup(horizontal = TRUE, container=group)
group.save.grf <- ggroup(horizontal = TRUE, container=group)
saveGrfLbl <- glabel("Grafik speichern...           ", container = group.save.grf)
btnSaveGrph <- gimage("save",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({plot(1:100)},
error = function(c){
message("Error in btnSaveGrph")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}
, container = group.save.grf)
refreshGrfLbl <- glabel("Grafik anzeigen...            ", container = group.refresh.grf)
btnRefreshGrph <- gimage("refresh",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({ #img <- tkrplot(BigGroup , plot(1:50))
#tkrreplot(img)
# l <- tkrplot(getToolkitWidget(groupgraph),
#function(){par(bg="white"); hist(rnorm(10))}, hscale=2, vscale=1.4)
tkrreplot(l)
# add(groupgraph, ll)
},
error = function(c){
message("Error in btnRefreshGrph")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}, container = group.refresh.grf
)
##### just to test the refresh
ff = function(){plot(1:15); points(15:1); segments(0,2, 15, 2);
;segments(0,8, 15, 2); segments(0,9, 15, 2);segments(1,9, 15, 2);segments(5,9, 15, 2)}
library(gWidgets2)
#l <- tkrplot(getToolkitWidget(groupgraph),
l <- tkrplot(getTopLevel(groupgraph)
#function(){par(bg="white"); hist(rnorm(100))}, hscale=2, vscale=1.4)
function(){par(bg="white");ff() ; grid()}, hscale=2, vscale=1.4)
add(groupgraph, l)
tkrreplot(l)
group.prm <- ggroup(container=group, horizontale = TRUE)
prm.meth <- glabel("Param. Vert. speichern...", container = group.prm)
btnSavePrm <- gimage("save",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({fileChoosePar()
},
warning = function(c){
message("warning in btnSavePrm")
message("File: PlotInWin")
message(c)
},
error = function(c){
message("Error in btnSavePrm")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}, container =  group.prm
)
group.prm.display <- ggroup(container=group, horizontale = TRUE)
prm.meth <- glabel("Ergebnis Anzeigen...       ", container = group.prm.display)
btnShowPrm <- gimage("refresh",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({
if(svalue(.GlobalEnv$stichprobe.cbx) == "alle"){
dfrm <- .GlobalEnv$all.to.save.dfrm[[svalue(.GlobalEnv$samp.show.cbx)]]
}else{
# that will be the default action: already loaded!
dfrm <- .GlobalEnv$to.save.dfrm
}
dfrm <- builDisplay(dfrm = dfrm)
dfrm <- as.matrix(dfrm)
dfrm[is.na(dfrm)] <- ""
dfrm <- as.data.frame(dfrm)
table.res <- gtable(dfrm, multiple = FALSE, chosencol = 0)
.GlobalEnv$win.display <- gwindow("Displayausgabe", width = 800,
height = 600, parent = .GlobalEnv$window)
add(.GlobalEnv$win.display, table.res)
},
error = function(c){
message(paste("This error occurs in this bloc: Ergebnis Anzeigen..."))
message(paste("Datei: PlotInWin"))
message(c)
},
warning = function(c){
message(paste("This warning occurs in this bloc: Ergebnis Anzeigen..."))
message(paste("Datei: PlotInWin"))
message(c)
})
}
, container = group.prm.display)
visible(gw) <- TRUE
library(gWidgetstcltk)
options(guiToolkit = "tcltk")
options(warn = -1)
gw <- gwindow("Anpassung", visible = FALSE, horinzontale = TRUE)
GG <- ggroup(horizontal=TRUE, container=gw)
group <- ggroup(horizontal=FALSE, container=GG)
groupgraph <- ggroup(horizontal=FALSE, container=GG, width = 1000 , height = 600, pointsize = 48)
options <- glabel("Grafiksoptionen", horizontal = FALSE, container = group)
titlefrm <- gframe("Ueberschrift", horizontal = FALSE, container=group)
.GlobalEnv$titlegrf <-gedit("Exanto", container = titlefrm)
x.frm <- gframe("Y Untere und Obere Gr.", horizontal = FALSE, container=group)
.GlobalEnv$xlow <-gedit("untere", container = x.frm)
.GlobalEnv$xup <-gedit("obere", container = x.frm)
y.frm <- gframe("HQ Untere und Obere Gr.", horizontal = FALSE, container=group)
.GlobalEnv$ylow <-gedit("untere", container = y.frm)
.GlobalEnv$yup <-gedit("obere", container = y.frm)
lab.frm <- gframe("X-Achse", horizontal = FALSE, container=group)
.GlobalEnv$xlabel <-gcombobox(c("alle", "y = - ln(ln(1/Pu))", "Pu", "T"), container = lab.frm)
dateifrm <- gframe("Typ Datei", horizontal = FALSE, container=group)
typecbx <- gcombobox(c("pp", "uu"), container = dateifrm)
group.refresh.grf <- ggroup(horizontal = TRUE, container=group)
group.save.grf <- ggroup(horizontal = TRUE, container=group)
saveGrfLbl <- glabel("Grafik speichern...           ", container = group.save.grf)
btnSaveGrph <- gimage("save",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({plot(1:100)},
error = function(c){
message("Error in btnSaveGrph")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}
, container = group.save.grf)
refreshGrfLbl <- glabel("Grafik anzeigen...            ", container = group.refresh.grf)
btnRefreshGrph <- gimage("refresh",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({ #img <- tkrplot(BigGroup , plot(1:50))
#tkrreplot(img)
# l <- tkrplot(getToolkitWidget(groupgraph),
#function(){par(bg="white"); hist(rnorm(10))}, hscale=2, vscale=1.4)
tkrreplot(l)
# add(groupgraph, ll)
},
error = function(c){
message("Error in btnRefreshGrph")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}, container = group.refresh.grf
)
##### just to test the refresh
ff = function(){plot(1:15); points(15:1); segments(0,2, 15, 2);
;segments(0,8, 15, 2); segments(0,9, 15, 2);segments(1,9, 15, 2);segments(5,9, 15, 2)}
l <- tkrplot(getToolkitWidget(groupgraph),
#function(){par(bg="white"); hist(rnorm(100))}, hscale=2, vscale=1.4)
function(){par(bg="white");ff() ; grid()}, hscale=2, vscale=1.4)
add(groupgraph, l)
tkrreplot(l)
group.prm <- ggroup(container=group, horizontale = TRUE)
prm.meth <- glabel("Param. Vert. speichern...", container = group.prm)
btnSavePrm <- gimage("save",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({fileChoosePar()
},
warning = function(c){
message("warning in btnSavePrm")
message("File: PlotInWin")
message(c)
},
error = function(c){
message("Error in btnSavePrm")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}, container =  group.prm
)
group.prm.display <- ggroup(container=group, horizontale = TRUE)
prm.meth <- glabel("Ergebnis Anzeigen...       ", container = group.prm.display)
btnShowPrm <- gimage("refresh",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({
if(svalue(.GlobalEnv$stichprobe.cbx) == "alle"){
dfrm <- .GlobalEnv$all.to.save.dfrm[[svalue(.GlobalEnv$samp.show.cbx)]]
}else{
# that will be the default action: already loaded!
dfrm <- .GlobalEnv$to.save.dfrm
}
dfrm <- builDisplay(dfrm = dfrm)
dfrm <- as.matrix(dfrm)
dfrm[is.na(dfrm)] <- ""
dfrm <- as.data.frame(dfrm)
table.res <- gtable(dfrm, multiple = FALSE, chosencol = 0)
.GlobalEnv$win.display <- gwindow("Displayausgabe", width = 800,
height = 600, parent = .GlobalEnv$window)
add(.GlobalEnv$win.display, table.res)
},
error = function(c){
message(paste("This error occurs in this bloc: Ergebnis Anzeigen..."))
message(paste("Datei: PlotInWin"))
message(c)
},
warning = function(c){
message(paste("This warning occurs in this bloc: Ergebnis Anzeigen..."))
message(paste("Datei: PlotInWin"))
message(c)
})
}
, container = group.prm.display)
visible(gw) <- TRUE
rm(list=ls(all=TRUE))
library(gWidgetstcltk)
options(guiToolkit = "tcltk")
options(warn = -1)
gw <- gwindow("Anpassung", visible = FALSE, horinzontale = TRUE)
GG <- ggroup(horizontal=TRUE, container=gw)
group <- ggroup(horizontal=FALSE, container=GG)
groupgraph <- ggroup(horizontal=FALSE, container=GG, width = 1000 , height = 600, pointsize = 48)
options <- glabel("Grafiksoptionen", horizontal = FALSE, container = group)
titlefrm <- gframe("Ueberschrift", horizontal = FALSE, container=group)
.GlobalEnv$titlegrf <-gedit("Exanto", container = titlefrm)
x.frm <- gframe("Y Untere und Obere Gr.", horizontal = FALSE, container=group)
.GlobalEnv$xlow <-gedit("untere", container = x.frm)
.GlobalEnv$xup <-gedit("obere", container = x.frm)
y.frm <- gframe("HQ Untere und Obere Gr.", horizontal = FALSE, container=group)
.GlobalEnv$ylow <-gedit("untere", container = y.frm)
.GlobalEnv$yup <-gedit("obere", container = y.frm)
lab.frm <- gframe("X-Achse", horizontal = FALSE, container=group)
.GlobalEnv$xlabel <-gcombobox(c("alle", "y = - ln(ln(1/Pu))", "Pu", "T"), container = lab.frm)
dateifrm <- gframe("Typ Datei", horizontal = FALSE, container=group)
typecbx <- gcombobox(c("pp", "uu"), container = dateifrm)
group.refresh.grf <- ggroup(horizontal = TRUE, container=group)
group.save.grf <- ggroup(horizontal = TRUE, container=group)
saveGrfLbl <- glabel("Grafik speichern...           ", container = group.save.grf)
btnSaveGrph <- gimage("save",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({plot(1:100)},
error = function(c){
message("Error in btnSaveGrph")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}
, container = group.save.grf)
refreshGrfLbl <- glabel("Grafik anzeigen...            ", container = group.refresh.grf)
btnRefreshGrph <- gimage("refresh",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({ #img <- tkrplot(BigGroup , plot(1:50))
#tkrreplot(img)
# l <- tkrplot(getToolkitWidget(groupgraph),
#function(){par(bg="white"); hist(rnorm(10))}, hscale=2, vscale=1.4)
tkrreplot(l)
# add(groupgraph, ll)
},
error = function(c){
message("Error in btnRefreshGrph")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}, container = group.refresh.grf
)
##### just to test the refresh
ff = function(){plot(1:15); points(15:1); segments(0,2, 15, 2);
;segments(0,8, 15, 2); segments(0,9, 15, 2);segments(1,9, 15, 2);segments(5,9, 15, 2)}
l <- tkrplot(getToolkitWidget(groupgraph),
#function(){par(bg="white"); hist(rnorm(100))}, hscale=2, vscale=1.4)
function(){par(bg="white");ff() ; grid()}, hscale=2, vscale=1.4)
add(groupgraph, l)
tkrreplot(l)
group.prm <- ggroup(container=group, horizontale = TRUE)
prm.meth <- glabel("Param. Vert. speichern...", container = group.prm)
btnSavePrm <- gimage("save",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({fileChoosePar()
},
warning = function(c){
message("warning in btnSavePrm")
message("File: PlotInWin")
message(c)
},
error = function(c){
message("Error in btnSavePrm")
message("File: PlotInWin")
message("Save was not be completed!")
message(c)
})
}, container =  group.prm
)
group.prm.display <- ggroup(container=group, horizontale = TRUE)
prm.meth <- glabel("Ergebnis Anzeigen...       ", container = group.prm.display)
btnShowPrm <- gimage("refresh",
dirname   = "stock",
handler   = function(h,...) {
tryCatch({
if(svalue(.GlobalEnv$stichprobe.cbx) == "alle"){
dfrm <- .GlobalEnv$all.to.save.dfrm[[svalue(.GlobalEnv$samp.show.cbx)]]
}else{
# that will be the default action: already loaded!
dfrm <- .GlobalEnv$to.save.dfrm
}
dfrm <- builDisplay(dfrm = dfrm)
dfrm <- as.matrix(dfrm)
dfrm[is.na(dfrm)] <- ""
dfrm <- as.data.frame(dfrm)
table.res <- gtable(dfrm, multiple = FALSE, chosencol = 0)
.GlobalEnv$win.display <- gwindow("Displayausgabe", width = 800,
height = 600, parent = .GlobalEnv$window)
add(.GlobalEnv$win.display, table.res)
},
error = function(c){
message(paste("This error occurs in this bloc: Ergebnis Anzeigen..."))
message(paste("Datei: PlotInWin"))
message(c)
},
warning = function(c){
message(paste("This warning occurs in this bloc: Ergebnis Anzeigen..."))
message(paste("Datei: PlotInWin"))
message(c)
})
}
, container = group.prm.display)
visible(gw) <- TRUE
q()
install.packages("logicFS")
VP1 <- read.csv("C://Users/Cesaire/Documents/SoSe15/Fallstudien_II_SS15/Projekt2/Woche14/Rcode/woche14/VP1_result.csv", header=T, na.strings = "", sep = "\t")
VP1 <- read.csv("C://Users/Cesaire/Documents/SoSe15/Fallstudien_II_SS15/Projekt2/Woche14/Rcode/VP1_result.csv", header=T, na.strings = "", sep = "\t")
VP1 <- read.csv("C://Users/Cesaire/Documents/SoSe15/Fallstudien_II_SS15/Projekt2/Woche14/Rcode/VP1_result.csv", header=T, na.strings = "", sep = "\t")
install.packages("scatterplot3d")
library(scatterplot3d)
VP1 <- read.csv("C://Users/Cesaire/Documents/SoSe15/Fallstudien_II_SS15/Projekt2/Woche14/Rcode/VP1_result.csv", header=T, na.strings = "", sep = "\t")
VP1
# 1   1  75 0.10 225     NA
# 2   2  75 0.10 375     NA
# 3   3  90 0.15 300     NA
# 4   4  75 0.20 225    500
# 5   5  75 0.20 375    315
# 6   6  90 0.15 300     NA
# 7   7 105 0.10 225     NA
# 8   8 105 0.10 375    328
# 9   9  90 0.15 300    363
# 10 10 105 0.20 225    466
# 11 11 105 0.20 375    257
# 12 12  90 0.15 300    307
# Scatterplot der drei Versuchplaenen
sc <- scatterplot3d(VP1[2:4], highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="2³-Faktorielle Versuchsplaenen",
pch=20, cex.symbols = 2, cex.lab = 2, angle=35)
# Faktor: Umkodierung
VP1[,2] <- (VP1[,2]-90)/15
VP1[,3] <- (VP1[,3]-0.15)/0.05
VP1[,4] <- (VP1[,4]-300)/75
VP1[,5][is.na(VP1[,5])] <- 500
# Scatterplot der drei Versuchplaenen
sc <- scatterplot3d(VP1[2:4], highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="2³-Faktorielle Versuchsplaenen",
pch=20, cex.symbols = 2, cex.lab = 2, angle=35)
######################### Anpassung Modell 1. Ordnung ############################################
# ohne Interaktionseffekte
X <- cbind(1,VP1[,2],VP1[,3],VP1[,4],VP1[,1])
y <- VP1[,5]
bdach <- solve(t(X)%*%X)%*%t(X)%*%y
bdach
# [1,] 558.205882
# [2,]  30.941176
# [3,]  -4.279412
# [4,] -60.093137
# [5,] -21.313725
# mit Interaktionseffekten
X <- cbind(1,VP1[,2],VP1[,3],VP1[,4], VP1[,2]*VP1[,3],VP1[,3]*VP1[,4],VP1[,2]*VP1[,4],VP1[,1])
y <- VP1[,5]
bdach <- solve(t(X)%*%X)%*%t(X)%*%y
bdach
#[1,] 558.205882
#[2,]  30.941176
#[3,]  -4.279412
#[4,] -60.093137
#[5,]  10.000000
#[6,] -27.750000
#[7,] -24.500000
#[8,] -21.313725
################### Modellvalidierung ############################################
# Schätzung Fehlervarianz
s2 <- var(y[c(3,6,9,12)])
s2
# [1] 9597.667
# Test aus Interaktion vc:f
Teststat <- (8*bdach[5]^2)/s2
Teststat
# [1] 0.08335359
qf(0.95,1,3)
# [1] 10.12796
1-pf(Teststat,1,3)
# [1] 0.791603
# Der p-Wert beträgt 0.79. Es gibt also keinen
# signifikanten Nachweis für Interaktionen
# Test aus Interaktion f:oel
Teststat <- (8*bdach[6]^2)/s2
# [1] 0.6418748
qf(0.95,1,3)
# [1] 10.12796
1-pf(Teststat,1,3)
# [1] 0.4816146
# Der p-Wert beträgt 0.48. Es gibt also keinen
# signifikanten Nachweis für Interaktionen
# Test aus Interaktion vc:oel
Teststat <- (8*bdach[7]^2)/s2
# [1] 0.5003299
qf(0.95,1,3)
# [1] 10.12796
1-pf(Teststat,1,3)
# [1] 0.5303518
# Der p-Wert beträgt 0.53. Es gibt also keinen
# signifikanten Nachweis für Interaktionen
# Test auf quadratische Effekte
SSquad <- (8*4*(mean(y[c(1,2,4,5,7,8,10,11)]) - mean(y[c(3,6,9,12)]))^2) / (8 + 4)
Teststat <- SSquad/s2
Teststat
# [1] 0.002934741
qf(0.95,1,3)
# [1] 10.12796
1-pf(Teststat,1,3)
# [1] 0.9602029
# Der p-Wert liegt bei 0.96, also kann H0 nicht abgelehnt werden. Es gibt also keinen signifikanten Nachweis für
# quadratische Effekte
# Residualplot des Haupteffekt-Modells (d.h. ohne Interaktionen)
Xn <- X[,-c(5,6,7)]
bn <- bdach[c(1:4,8)]
Prog <- Xn%*%bn
Res <- y - Xn%*%bn
plot(Prog, Res, xlab=expression(paste("Prognose   ", hat(y)[i])), ylab=expression(paste("Residuum   ", hat(e)[i])), main="Residualplot des angepassten Modells 1. Ordnung \n (ohne Interaktion)")
abline(0,0)
# Insbesondere die Zentrumspunkt-Ergebnisse weisen keine Struktur auf
################### Schrittweise Experimente auf Pfad des steilsten Anstiegs ##################################
# Richtungsvektor: Steepest descent, also die Vorzeichen der Koeffizienten umdrehen
Richtung <- bdach[2:4]
# [1]  30.941176  -4.279412 -60.093137
# Koeffizient von Faktor 3 (oel) ist betragsmäßig am größten. Normiere die Richtung deshalb mit diesem Koeffizienten
# Normieren des Richtungsvektors auf die richtige Schrittweite
Richtung_norm <- Richtung/(abs(bdach[4])/(1/6))
Richtung_norm
# [1]  0.08581450 -0.01186883 -0.16666667
# Schritte codiert und decodiert
Codiert <- matrix(0,ncol=3,nrow=6)
for (i in 1:6){
Codiert[i,] <- i*Richtung_norm
}
Codiert
# [1,] 0.0858145 -0.01186883 -0.1666667
# [2,] 0.1716290 -0.02373766 -0.3333333
# [3,] 0.2574435 -0.03560649 -0.5000000
# [4,] 0.3432580 -0.04747532 -0.6666667
# [5,] 0.4290725 -0.05934416 -0.8333333
# [6,] 0.5148870 -0.07121299 -1.0000000
# Scatterplot der drei Versuchplaenen und die Schrittweite
sc = scatterplot3d(VP1[2:4], highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="2³-Faktorielle Versuchsplaenen",
pch=20, cex.symbols = 3, cex.lab = 2, angle = 45, grid = FALSE)
pfad <- rbind(0, Codiert)
sc$points3d(pfad[,1], pfad[,2], pfad[,3], col = "blue", type = "l")
sc$points3d(Codiert[,1], Codiert[,2], Codiert[,3], col = "blue", pch = 20,
cex = c(3, 2.5, 2.0, 1.5, 1, 0.5))
Decodiert <- matrix(0,ncol=3,nrow=6)
Decodiert[,1] <- Codiert[,1]*15 + 90
Decodiert[,2] <- Codiert[,2]*0.05 + 0.15
Decodiert[,3] <- Codiert[,3]*75 + 300
Decodiert
#         [,1]      [,2]  [,3]
# [1,] 91.28722 0.1494066 287.5
# [2,] 92.57444 0.1488131 275.0
# [3,] 93.86165 0.1482197 262.5
# [4,] 95.14887 0.1476262 250.0
# [5,] 96.43609 0.1470328 237.5
# [6,] 97.72331 0.1464394 225.0
### Pfad entlangwandern
VP1 <- read.csv("C://Users/Cesaire/Documents/SoSe15/Fallstudien_II_SS15/Projekt2/Woche14/Rcode/VP1_result.csv", header=T, na.strings = "", sep = "\t")
sc = scatterplot3d(VP1[2:4], highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="2³-Faktorielle Versuchsplaenen",
pch=20, cex.symbols = 3, cex.lab = 2, angle = 45, grid = FALSE)
pfad <- rbind(0, Codiert)
sc$points3d(pfad[,1], pfad[,2], pfad[,3], col = "blue", type = "l")
sc$points3d(Decodiert[,1], Decodiert[,2], Decodiert[,3], col = "blue", pch = 20,
cex = c(3, 2.5, 2.0, 1.5, 1, 0.5))
getwd()
setwd("~/R/win-library/3.1/Rcmdr/etc")
round(NA)
