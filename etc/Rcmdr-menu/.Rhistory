sapply(1:25, function(i) sapply(k.wert,
function(kk) oneStep(b = 100, n = 3, kk) ))
}
plotIt <- function(){
set.seed(120)
boxplot(t(log10(abs(studie()))),
names = c("0", "0.5", "1", "1.5", "2.5", "3", "3.5", "4"),
xlab = "k", ylab = "log10(abs(abstand))")
}
#pdf("error_logReg_glm.pdf")
plotIt()
#dev.off()
#Was faellt Ihnen auf?
#Ant: Je der Vorfaktor Kappa (k) grosser ist, desto ist das Optimierungsproblem
#     schwer zu loesen, deshalb vergroesst sich der meittlere Abstand deutlich
#     fuer groesseres k.
set.seed(1240)
generateData(b = 100, n = 3, k = 1)
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep(b = 100, n = 3, k)
# ************************************************
# *          CStat2014 Blatt Nr. 8               *
# *          Abgabe von Cesaire Kuete            *
# *            Dienstag, 10-12 Uhr               *
# ************************************************
library(testthat)
library(mnormt)
#  Aufgabe 3
# logLikelihood - berechnet eine log-Likelihood - Funktion
#
# Input:
#   X - die Matrix der unabhaengigen Variablen.
#   y - der Vektor der abhaengigen Variable.
#   teta - Parameter der Funktion.
#
# Output:
#   bewertete Log-Likelihood an der Stelle teta.
logLikelihood <- function(teta, X, y){
return(sum(y * X %*% teta - log(1 + exp(X %*% teta))))
}
# logReg - berechnet eine logistische Regression.
#
# Input:
#   X - die Matrix der unabhaengigen Variablen.
#   y - der Vektor der abhaengigen Variable. Sein Werte muessen in {0, 1}
#       sein
#   startwert - gilt als Startwert bei Optimierungsproblem.
#
# Output:
#   die geschaetzten Parameter teta.
logReg <- function(y, X, startwert){
stopifnot(is.numeric(y),
y %in% c(0, 1),
is.numeric(X),
is.matrix(X) || is.vector(X),
is.numeric(startwert),
length(startwert) != ncol(as.matrix(X))
)
teta <- optim(par = startwert,
fn = function(teta) logLikelihood(teta, X, y),
gr = NULL,
method = "BFGS",
control = list(fnscale = -1,
reltol=sqrt(.Machine$double.eps))
# Das Problem wird als Maximierungsproblem geloest
)$par
return(teta)
}
#Frage: Implementieren Sie eine Funktion generateData zur Datengenerierung
# generateData - generatet die Daten als in Folie 469 erklaert.
#
# Input:
#   k - Steurungsfaktor.
#   b = Anzahl der Beobachtungen
#   n = die Anzahl der zu erzeugenden Variablen
#
# Output:
#   eine list, die aus Designmatrix X und abhaengiger Variable Y besteht.
generateData <- function(b = 100, n = 3, k){
stopifnot(is.numeric(k),
as.integer(b) == b,
as.integer(n) == n,
b > 0,
n > 1,
k >= 0)
X.schlange <- rmnorm(b, mean = numeric(n - 1), varcov = diag(n - 1))
p <- runif(1, 0, 1)
y <- sample(c(0, 1), b, replace = TRUE, prob = c(p, 1 - p))
X <- X.schlange + k * y * rep(1, b)
X <- cbind(X, 1)
return(list(X = X, y = y))
}
#@ReviewMe
set.seed(1240)
generateData(b = 100, n = 3, k = 1)
# Frage: Schreiben Sie eine Funktion oneStep, die einen Schritt Ihrer
#         Simulation durchfuehrt.
# oneStep fuehrt ein Schritt unserer Studie durch.
# Input:
#   k - Steurungsfaktor.
#   b = Anzahl der Beobachtungen
#   n = die Anzahl der zu erzeugenden Variablen
#
# Output:
#   mittlere Abstand zwischen die durch glm und
#   die durch logReg gechaetzten koeffiziente
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
# Frage: Fuehren Sie die Studie fuer k in {0, 0.5, 1, 1.5, 2.5, 3, 3.5, 4}
# Fuer gegebenen kappa-Wert wird oneStep 25 Mal in studie() durch gefuehrt.
studie <- function(){
k.wert <- c(0, 0.5, 1, 1.5, 2.5, 3, 3.5, 4)
sapply(1:25, function(i) sapply(k.wert,
function(kk) oneStep(b = 100, n = 3, kk) ))
}
plotIt <- function(){
set.seed(120)
boxplot(t(log10(abs(studie()))),
names = c("0", "0.5", "1", "1.5", "2.5", "3", "3.5", "4"),
xlab = "k", ylab = "log10(abs(abstand))")
}
pdf("error_logReg_glm.pdf")
plotIt()
dev.off()
#Was faellt Ihnen auf?
#Ant: Je der Vorfaktor Kappa (k) grosser ist, desto ist das Optimierungsproblem
#     schwer zu loesen, deshalb vergroesst sich der meittlere Abstand deutlich
#     fuer groesseres k.
# ************************************************
# *          CStat2014 Blatt Nr. 8               *
# *          Abgabe von Cesaire Kuete            *
# *            Dienstag, 10-12 Uhr               *
# ************************************************
library(testthat)
library(mnormt)
#  Aufgabe 3
# logLikelihood - berechnet eine log-Likelihood - Funktion
#
# Input:
#   X - die Matrix der unabhaengigen Variablen.
#   y - der Vektor der abhaengigen Variable.
#   teta - Parameter der Funktion.
#
# Output:
#   bewertete Log-Likelihood an der Stelle teta.
logLikelihood <- function(teta, X, y){
return(sum(y * X %*% teta - log(1 + exp(X %*% teta))))
}
# logReg - berechnet eine logistische Regression.
#
# Input:
#   X - die Matrix der unabhaengigen Variablen.
#   y - der Vektor der abhaengigen Variable. Sein Werte muessen in {0, 1}
#       sein
#   startwert - gilt als Startwert bei Optimierungsproblem.
#
# Output:
#   die geschaetzten Parameter teta.
logReg <- function(y, X, startwert){
stopifnot(is.numeric(y),
y %in% c(0, 1),
is.numeric(X),
is.matrix(X) || is.vector(X),
is.numeric(startwert),
length(startwert) != ncol(as.matrix(X))
)
teta <- optim(par = startwert,
fn = function(teta) logLikelihood(teta, X, y),
gr = NULL,
method = "BFGS",
control = list(fnscale = -1,
reltol=sqrt(.Machine$double.eps))
# Das Problem wird als Maximierungsproblem geloest
)$par
return(teta)
}
#Frage: Implementieren Sie eine Funktion generateData zur Datengenerierung
# generateData - generatet die Daten als in Folie 469 erklaert.
#
# Input:
#   k - Steurungsfaktor.
#   b = Anzahl der Beobachtungen
#   n = die Anzahl der zu erzeugenden Variablen
#
# Output:
#   eine list, die aus Designmatrix X und abhaengiger Variable Y besteht.
generateData <- function(b = 100, n = 3, k){
stopifnot(is.numeric(k),
as.integer(b) == b,
as.integer(n) == n,
b > 0,
n > 1,
k >= 0)
X.schlange <- rmnorm(b, mean = numeric(n - 1), varcov = diag(n - 1))
p <- runif(1, 0, 1)
y <- sample(c(0, 1), b, replace = TRUE, prob = c(p, 1 - p))
X <- X.schlange + k * y * rep(1, b)
X <- cbind(X, 1)
return(list(X = X, y = y))
}
#@ReviewMe
set.seed(1240)
generateData(b = 100, n = 3, k = 1)
# Frage: Schreiben Sie eine Funktion oneStep, die einen Schritt Ihrer
#         Simulation durchfuehrt.
# oneStep fuehrt ein Schritt unserer Studie durch.
# Input:
#   k - Steurungsfaktor.
#   b = Anzahl der Beobachtungen
#   n = die Anzahl der zu erzeugenden Variablen
#
# Output:
#   mittlere Abstand zwischen die durch glm und
#   die durch logReg gechaetzten koeffiziente
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
# Frage: Fuehren Sie die Studie fuer k in {0, 0.5, 1, 1.5, 2.5, 3, 3.5, 4}
# Fuer gegebenen kappa-Wert wird oneStep 25 Mal in studie() durch gefuehrt.
studie <- function(){
k.wert <- c(0, 0.5, 1, 1.5, 2.5, 3, 3.5, 4)
sapply(1:25, function(i) sapply(k.wert,
function(kk) oneStep(b = 100, n = 3, kk) ))
}
plotIt <- function(){
set.seed(120)
boxplot(t(log10(abs(studie()))),
names = c("0", "0.5", "1", "1.5", "2.5", "3", "3.5", "4"),
xlab = "k", ylab = "log10(abs(abstand))")
}
pdf("error_logReg_glm.pdf")
plotIt()
dev.off()
#Was faellt Ihnen auf?
#Ant: Je der Vorfaktor Kappa (k) grosser ist, desto ist das Optimierungsproblem
#     schwer zu loesen, deshalb vergroesst sich der meittlere Abstand deutlich
#     fuer groesseres k.
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep <- function(b = 100, n = 3, k=1)
>
oneStep(b = 100, n = 3, k=1)
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep(b = 100, n = 3, k=1)
n
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
print(statwert)
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep(b = 100, n = 3, k=1)
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
print(statwert)
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- apply(statwert, 2, function(st.wert){
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep(b = 100, n = 3, k=1)
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
print(statwert)
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep(b = 100, n = 3, k=1)
b = 100
n = 3
k=1
generateData(b, n, k)
rmnorm(10, mean = numeric(n), varcov = diag(n))
sapply(statwert, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
klassi.pb <- generateData(b, n, k)
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
coef.abst <- apply(statwert, 2, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
coef.abst <- apply(statwert, 1, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
logReg <- function(y, X, startwert){
stopifnot(is.numeric(y),
y %in% c(0, 1),
is.numeric(X),
is.matrix(X) || is.vector(X),
is.numeric(startwert),
length(startwert) == ncol(as.matrix(X))
)
teta <- optim(par = startwert,
fn = function(teta) logLikelihood(teta, X, y),
gr = NULL,
method = "BFGS",
control = list(fnscale = -1,
reltol=sqrt(.Machine$double.eps))
# Das Problem wird als Maximierungsproblem geloest
)$par
return(teta)
}
oneStep(b = 100, n = 3, k=1)
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- sapply(statwert, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep(b = 100, n = 3, k=1)
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- apply(statwert, 1, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep(b = 100, n = 3, k=1)
oneStep(b = 100, n = 3, k=1)
logLikelihood <- function(teta, X, y){
return(sum(y * X %*% teta - log(1 + exp(X %*% teta))))
}
# logReg - berechnet eine logistische Regression.
#
# Input:
#   X - die Matrix der unabhaengigen Variablen.
#   y - der Vektor der abhaengigen Variable. Sein Werte muessen in {0, 1}
#       sein
#   startwert - gilt als Startwert bei Optimierungsproblem.
#
# Output:
#   die geschaetzten Parameter teta.
logReg <- function(y, X, startwert){
stopifnot(is.numeric(y),
y %in% c(0, 1),
is.numeric(X),
is.matrix(X) || is.vector(X),
is.numeric(startwert),
length(startwert) == ncol(as.matrix(X))
)
teta <- optim(par = startwert,
fn = function(teta) logLikelihood(teta, X, y),
gr = NULL,
method = "BFGS",
control = list(fnscale = -1,
reltol=sqrt(.Machine$double.eps))
# Das Problem wird als Maximierungsproblem geloest
)$par
return(teta)
}
#Frage: Implementieren Sie eine Funktion generateData zur Datengenerierung
# generateData - generatet die Daten als in Folie 469 erklaert.
#
# Input:
#   k - Steurungsfaktor.
#   b = Anzahl der Beobachtungen
#   n = die Anzahl der zu erzeugenden Variablen
#
# Output:
#   eine list, die aus Designmatrix X und abhaengiger Variable Y besteht.
generateData <- function(b = 100, n = 3, k){
stopifnot(is.numeric(k),
as.integer(b) == b,
as.integer(n) == n,
b > 0,
n > 1,
k >= 0)
X.schlange <- rmnorm(b, mean = numeric(n - 1), varcov = diag(n - 1))
p <- runif(1, 0, 1)
y <- sample(c(0, 1), b, replace = TRUE, prob = c(p, 1 - p))
X <- X.schlange + k * y * rep(1, b)
X <- cbind(X, 1)
return(list(X = X, y = y))
}
#@ReviewMe
set.seed(1240)
generateData(b = 100, n = 3, k = 1)
# Frage: Schreiben Sie eine Funktion oneStep, die einen Schritt Ihrer
#         Simulation durchfuehrt.
# oneStep fuehrt ein Schritt unserer Studie durch.
# Input:
#   k - Steurungsfaktor.
#   b = Anzahl der Beobachtungen
#   n = die Anzahl der zu erzeugenden Variablen
#
# Output:
#   mittlere Abstand zwischen die durch glm und
#   die durch logReg gechaetzten koeffiziente
oneStep <- function(b = 100, n = 3, k){
klassi.pb <- generateData(b, n, k)
statwert <- rmnorm(10, mean = numeric(n), varcov = diag(n))
coef.glm <- glm.fit(klassi.pb$X, klassi.pb$y, family = binomial(),
intercept = TRUE)$coefficients
coef.abst <- apply(statwert, 1, function(st.wert){
print(st.wert)
coef.logReg <- logReg(klassi.pb$y, klassi.pb$X, st.wert)
coef.glm - coef.logReg
})
mean(coef.abst)
}
oneStep(b = 100, n = 3, k=1)
# Frage: Fuehren Sie die Studie fuer k in {0, 0.5, 1, 1.5, 2.5, 3, 3.5, 4}
# Fuer gegebenen kappa-Wert wird oneStep 25 Mal in studie() durch gefuehrt.
studie <- function(){
k.wert <- c(0, 0.5, 1, 1.5, 2.5, 3, 3.5, 4)
sapply(1:25, function(i) sapply(k.wert,
function(kk) oneStep(b = 100, n = 3, kk) ))
}
plotIt <- function(){
set.seed(120)
boxplot(t(log10(abs(studie()))),
names = c("0", "0.5", "1", "1.5", "2.5", "3", "3.5", "4"),
xlab = "k", ylab = "log10(abs(abstand))")
}
pdf("error_logReg_glm.pdf")
plotIt()
dev.off()
#Was faellt Ihnen auf?
#Ant: Je der Vorfaktor Kappa (k) grosser ist, desto ist das Optimierungsproblem
#     schwer zu loesen, deshalb vergroesst sich der meittlere Abstand deutlich
#     fuer groesseres k.
